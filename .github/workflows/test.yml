name: Automated Testing

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # ========================================
  # UNIT TESTS
  # ========================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        working-directory: ./${{ matrix.project }}-nextjs
        if: matrix.project == 'frontend'
        run: npm ci

      - name: Install Dependencies
        working-directory: ./${{ matrix.project }}-nestjs
        if: matrix.project == 'backend'
        run: npm ci

      - name: Run Unit Tests (Frontend)
        working-directory: ./frontend-nextjs
        if: matrix.project == 'frontend'
        run: |
          npm run test:unit -- --coverage --watchAll=false

      - name: Run Unit Tests (Backend)
        working-directory: ./backend-nestjs
        if: matrix.project == 'backend'
        run: |
          npm run test -- --coverage --watchAll=false

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./${{ matrix.project == 'frontend' && 'frontend-nextjs' || 'backend-nestjs' }}/coverage/lcov.info
          flags: ${{ matrix.project }}-unit
          name: ${{ matrix.project }}-unit-coverage

  # ========================================
  # INTEGRATION TESTS
  # ========================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vantagepoint_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Backend Dependencies
        working-directory: ./backend-nestjs
        run: npm ci

      - name: Run Database Migrations
        working-directory: ./backend-nestjs
        run: npm run migration:run
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vantagepoint_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key

      - name: Run Integration Tests
        working-directory: ./backend-nestjs
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vantagepoint_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key

      - name: Upload Integration Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: ./backend-nestjs/test-results/

  # ========================================
  # END-TO-END TESTS
  # ========================================
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vantagepoint_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Start Backend
      - name: Install Backend Dependencies
        working-directory: ./backend-nestjs
        run: npm ci

      - name: Build Backend
        working-directory: ./backend-nestjs
        run: npm run build

      - name: Start Backend Server
        working-directory: ./backend-nestjs
        run: |
          npm run start:prod &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vantagepoint_e2e
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
          PORT: 3001

      # Start Frontend
      - name: Install Frontend Dependencies
        working-directory: ./frontend-nextjs
        run: npm ci

      - name: Build Frontend
        working-directory: ./frontend-nextjs
        run: npm run build

      - name: Start Frontend Server
        working-directory: ./frontend-nextjs
        run: |
          npm run start &
          sleep 10
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001

      # Run E2E Tests
      - name: Install Playwright
        working-directory: ./frontend-nextjs
        run: npx playwright install --with-deps

      - name: Run E2E Tests
        working-directory: ./frontend-nextjs
        run: npm run test:e2e

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            ./frontend-nextjs/test-results/
            ./frontend-nextjs/playwright-report/

  # ========================================
  # PERFORMANCE TESTS
  # ========================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Artillery
        run: npm install -g artillery

      - name: Run Load Tests
        run: |
          # Create a simple load test
          cat > load-test.yml << EOF
          config:
            target: 'http://localhost:3001'
            phases:
              - duration: 60
                arrivalRate: 10
          scenarios:
            - name: "API Load Test"
              requests:
                - get:
                    url: "/health"
          EOF
          
          # Run load test (this would need a running server)
          echo "Load test configuration created"

      - name: Upload Performance Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: ./performance-results/

  # ========================================
  # API CONTRACT TESTS
  # ========================================
  contract-tests:
    name: API Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Backend Dependencies
        working-directory: ./backend-nestjs
        run: npm ci

      - name: Generate OpenAPI Spec
        working-directory: ./backend-nestjs
        run: |
          npm run build
          npm run generate:openapi

      - name: Validate OpenAPI Spec
        run: |
          npx swagger-cli validate ./backend-nestjs/openapi.json

      - name: Upload OpenAPI Spec
        uses: actions/upload-artifact@v3
        with:
          name: openapi-spec
          path: ./backend-nestjs/openapi.json

  # ========================================
  # TEST SUMMARY
  # ========================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, contract-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download All Test Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./test-reports

      - name: Generate Test Summary
        run: |
          echo "# Test Results Summary" > test-summary.md
          echo "Generated on: $(date)" >> test-summary.md
          echo "" >> test-summary.md
          
          echo "## Test Results" >> test-summary.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-summary.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-summary.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-summary.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md
          echo "- Contract Tests: ${{ needs.contract-tests.result }}" >> test-summary.md

      - name: Upload Test Summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary-${{ github.sha }}
          path: test-summary.md

      - name: Comment PR with Test Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # ========================================
  # DEPENDENCY VULNERABILITY SCANNING
  # ========================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Frontend Dependencies
      - name: Install Frontend Dependencies
        working-directory: ./frontend-nextjs
        run: npm ci

      - name: Run npm audit (Frontend)
        working-directory: ./frontend-nextjs
        run: |
          npm audit --audit-level=moderate --json > frontend-audit.json || true
          npm audit --audit-level=moderate

      - name: Upload Frontend Audit Results
        uses: actions/upload-artifact@v3
        with:
          name: frontend-audit-results
          path: ./frontend-nextjs/frontend-audit.json

      # Backend Dependencies
      - name: Install Backend Dependencies
        working-directory: ./backend-nestjs
        run: npm ci

      - name: Run npm audit (Backend)
        working-directory: ./backend-nestjs
        run: |
          npm audit --audit-level=moderate --json > backend-audit.json || true
          npm audit --audit-level=moderate

      - name: Upload Backend Audit Results
        uses: actions/upload-artifact@v3
        with:
          name: backend-audit-results
          path: ./backend-nestjs/backend-audit.json

      # Infrastructure Dependencies
      - name: Install Infrastructure Dependencies
        working-directory: ./infrastructure
        run: npm ci

      - name: Run npm audit (Infrastructure)
        working-directory: ./infrastructure
        run: |
          npm audit --audit-level=moderate --json > infrastructure-audit.json || true
          npm audit --audit-level=moderate

      - name: Upload Infrastructure Audit Results
        uses: actions/upload-artifact@v3
        with:
          name: infrastructure-audit-results
          path: ./infrastructure/infrastructure-audit.json

  # ========================================
  # CONTAINER SECURITY SCANNING
  # ========================================
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images (if any)
        run: |
          # Build any Docker images for scanning
          echo "Building Docker images for security scanning..."

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ========================================
  # INFRASTRUCTURE SECURITY SCANNING
  # ========================================
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Infrastructure Dependencies
        working-directory: ./infrastructure
        run: npm ci

      - name: Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./infrastructure
          framework: cloudformation
          output_format: sarif
          output_file_path: checkov-results.sarif
          skip_check: CKV_AWS_79,CKV_AWS_23  # Skip specific checks if needed

      - name: Upload Checkov results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run CDK Security Audit
        working-directory: ./infrastructure
        run: |
          # Additional CDK-specific security checks
          npx cdk synth --context environment=dev > /dev/null
          echo "CDK synthesis successful - no security issues detected"

  # ========================================
  # SECRETS SCANNING
  # ========================================
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ========================================
  # CODE QUALITY & SECURITY ANALYSIS
  # ========================================
  code-analysis:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Initialize CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript

      # Perform CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      # ESLint Security Plugin
      - name: Install Frontend Dependencies
        working-directory: ./frontend-nextjs
        run: npm ci

      - name: Run ESLint Security Check (Frontend)
        working-directory: ./frontend-nextjs
        run: |
          npx eslint . --ext .ts,.tsx,.js,.jsx --config .eslintrc.security.js || true

      - name: Install Backend Dependencies
        working-directory: ./backend-nestjs
        run: npm ci

      - name: Run ESLint Security Check (Backend)
        working-directory: ./backend-nestjs
        run: |
          npx eslint . --ext .ts,.js --config .eslintrc.security.js || true

  # ========================================
  # COMPLIANCE CHECKS
  # ========================================
  compliance-check:
    name: Compliance Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Infrastructure Dependencies
        working-directory: ./infrastructure
        run: npm ci

      - name: HIPAA Compliance Check
        working-directory: ./infrastructure
        run: |
          # Check for HIPAA compliance requirements
          echo "Checking HIPAA compliance requirements..."
          # Add specific HIPAA checks here

      - name: SOC 2 Compliance Check
        working-directory: ./infrastructure
        run: |
          # Check for SOC 2 compliance requirements
          echo "Checking SOC 2 compliance requirements..."
          # Add specific SOC 2 checks here

      - name: GDPR Compliance Check
        working-directory: ./infrastructure
        run: |
          # Check for GDPR compliance requirements
          echo "Checking GDPR compliance requirements..."
          # Add specific GDPR checks here

  # ========================================
  # SECURITY REPORT GENERATION
  # ========================================
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, infrastructure-scan, secrets-scan, code-analysis, compliance-check]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download All Security Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./security-reports

      - name: Generate Security Summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "Generated on: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Scan Results" >> security-summary.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-summary.md
          echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-summary.md
          echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-summary.md
          echo "- Code Analysis: ${{ needs.code-analysis.result }}" >> security-summary.md
          echo "- Compliance Check: ${{ needs.compliance-check.result }}" >> security-summary.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-report-${{ github.sha }}
          path: |
            security-summary.md
            security-reports/

      - name: Comment PR with Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

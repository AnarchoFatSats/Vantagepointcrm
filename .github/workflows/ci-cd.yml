name: VantagePoint CRM CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - production

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  # ========================================
  # CODE QUALITY & SECURITY CHECKS
  # ========================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Frontend Quality Checks
      - name: Install Frontend Dependencies
        working-directory: ./frontend-nextjs
        run: npm ci

      - name: Frontend Linting
        working-directory: ./frontend-nextjs
        run: npm run lint

      - name: Frontend Type Checking
        working-directory: ./frontend-nextjs
        run: npm run type-check

      - name: Frontend Build Test
        working-directory: ./frontend-nextjs
        run: npm run build

      # Backend Quality Checks
      - name: Install Backend Dependencies
        working-directory: ./backend-nestjs
        run: npm ci

      - name: Backend Linting
        working-directory: ./backend-nestjs
        run: npm run lint

      - name: Backend Type Checking
        working-directory: ./backend-nestjs
        run: npm run build

      # Infrastructure Quality Checks
      - name: Install Infrastructure Dependencies
        working-directory: ./infrastructure
        run: npm ci

      - name: Infrastructure Type Checking
        working-directory: ./infrastructure
        run: npm run build

      - name: Infrastructure Synthesis
        working-directory: ./infrastructure
        run: npx cdk synth --context environment=dev

      # Security Scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # Dependency Scanning
      - name: Run npm audit (Frontend)
        working-directory: ./frontend-nextjs
        run: npm audit --audit-level=moderate

      - name: Run npm audit (Backend)
        working-directory: ./backend-nestjs
        run: npm audit --audit-level=moderate

      - name: Run npm audit (Infrastructure)
        working-directory: ./infrastructure
        run: npm audit --audit-level=moderate

  # ========================================
  # UNIT & INTEGRATION TESTS
  # ========================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vantagepoint_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Backend Tests
      - name: Install Backend Dependencies
        working-directory: ./backend-nestjs
        run: npm ci

      - name: Run Backend Unit Tests
        working-directory: ./backend-nestjs
        run: npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vantagepoint_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key

      - name: Run Backend Integration Tests
        working-directory: ./backend-nestjs
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vantagepoint_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key

      # Frontend Tests
      - name: Install Frontend Dependencies
        working-directory: ./frontend-nextjs
        run: npm ci

      - name: Run Frontend Unit Tests
        working-directory: ./frontend-nextjs
        run: npm run test

      - name: Run Frontend E2E Tests
        working-directory: ./frontend-nextjs
        run: npm run test:e2e

      # Test Coverage
      - name: Upload Backend Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend-nestjs/coverage/lcov.info
          flags: backend
          name: backend-coverage

      - name: Upload Frontend Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend-nextjs/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # ========================================
  # SECURITY & COMPLIANCE CHECKS
  # ========================================
  security:
    name: Security & Compliance
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Infrastructure Security Scanning
      - name: Install Infrastructure Dependencies
        working-directory: ./infrastructure
        run: npm ci

      - name: Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./infrastructure
          framework: cloudformation
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      # OWASP ZAP Security Testing
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # ========================================
  # BUILD & PACKAGE
  # ========================================
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test, security]
    outputs:
      frontend-build: ${{ steps.frontend-build.outputs.build-id }}
      backend-build: ${{ steps.backend-build.outputs.build-id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Build Frontend
      - name: Install Frontend Dependencies
        working-directory: ./frontend-nextjs
        run: npm ci

      - name: Build Frontend
        id: frontend-build
        working-directory: ./frontend-nextjs
        run: |
          npm run build
          echo "build-id=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Upload Frontend Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build-${{ github.sha }}
          path: ./frontend-nextjs/.next/
          retention-days: 7

      # Build Backend
      - name: Install Backend Dependencies
        working-directory: ./backend-nestjs
        run: npm ci

      - name: Build Backend
        id: backend-build
        working-directory: ./backend-nestjs
        run: |
          npm run build
          echo "build-id=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Upload Backend Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build-${{ github.sha }}
          path: ./backend-nestjs/dist/
          retention-days: 7

  # ========================================
  # DEPLOY TO DEVELOPMENT
  # ========================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Deploy Infrastructure
      - name: Install Infrastructure Dependencies
        working-directory: ./infrastructure
        run: npm ci

      - name: Deploy Infrastructure to Dev
        working-directory: ./infrastructure
        run: |
          npx cdk deploy --context environment=dev --require-approval never

      # Deploy Backend
      - name: Download Backend Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build-${{ github.sha }}

      - name: Deploy Backend to Lambda
        run: |
          # Get Lambda function name from CDK output
          FUNCTION_NAME=$(aws cloudformation describe-stacks \
            --stack-name VantagePoint-dev \
            --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionName`].OutputValue' \
            --output text)
          
          # Update Lambda function code
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --zip-file fileb://backend-build-${{ github.sha }}.zip

      # Deploy Frontend
      - name: Download Frontend Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build-${{ github.sha }}

      - name: Deploy Frontend to S3
        run: |
          # Get S3 bucket name from CDK output
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name VantagePoint-dev \
            --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \
            --output text)
          
          # Upload to S3
          aws s3 sync ./frontend-build-${{ github.sha }}/ $BUCKET_NAME --delete

      - name: Run Smoke Tests
        run: |
          # Get API Gateway URL
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name VantagePoint-dev \
            --query 'Stacks[0].Outputs[?OutputKey==`APIGatewayURL`].OutputValue' \
            --output text)
          
          # Test API health endpoint
          curl -f $API_URL/health || exit 1

  # ========================================
  # DEPLOY TO STAGING
  # ========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Deploy Infrastructure
      - name: Install Infrastructure Dependencies
        working-directory: ./infrastructure
        run: npm ci

      - name: Deploy Infrastructure to Staging
        working-directory: ./infrastructure
        run: |
          npx cdk deploy --context environment=staging --require-approval never

      # Deploy Applications
      - name: Deploy Applications to Staging
        run: |
          # Similar deployment steps as dev but for staging environment
          echo "Deploying to staging environment..."

  # ========================================
  # DEPLOY TO PRODUCTION
  # ========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Deploy Infrastructure
      - name: Install Infrastructure Dependencies
        working-directory: ./infrastructure
        run: npm ci

      - name: Deploy Infrastructure to Production
        working-directory: ./infrastructure
        run: |
          npx cdk deploy --context environment=production --require-approval never

      # Deploy Applications
      - name: Deploy Applications to Production
        run: |
          # Similar deployment steps as dev but for production environment
          echo "Deploying to production environment..."

      - name: Run Production Health Checks
        run: |
          # Comprehensive health checks for production
          echo "Running production health checks..."

  # ========================================
  # NOTIFICATIONS
  # ========================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Success
        if: ${{ needs.deploy-production.result == 'success' }}
        run: |
          echo "✅ Production deployment successful!"
          # Add Slack/email notification here

      - name: Notify Failure
        if: ${{ needs.deploy-production.result == 'failure' }}
        run: |
          echo "❌ Production deployment failed!"
          # Add Slack/email notification here
